<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>pers.zxt.springboot</groupId>
  <artifactId>springboot-demos</artifactId>
  <version>1.0</version>
  <packaging>jar</packaging>

  <name>springboot-demos</name>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
  </properties>

  <!--SpringBoot的父项目-->
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.4.2</version>
    <relativePath/>
  </parent>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
    <!--用于测试SpringConfig的使用，有了下面的springboot依赖项之后，可以不用显式引入-->
    <!--<dependency>-->
    <!--  <groupId>org.springframework</groupId>-->
    <!--  <artifactId>spring-context</artifactId>-->
    <!--  <version>5.3.1</version>-->
    <!--</dependency>-->

    <!--springboot的依赖项，这里选择是web的依赖项-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <!--处理ConfigurationProperties有关的元数据-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
    </dependency>

    <!--mybatis起步依赖-->
    <dependency>
      <groupId>org.mybatis.spring.boot</groupId>
      <artifactId>mybatis-spring-boot-starter</artifactId>
      <version>2.1.4</version>
    </dependency>
    <!--mybatis-plus起步依赖-->
    <dependency>
      <groupId>com.baomidou</groupId>
      <artifactId>mybatis-plus-boot-starter</artifactId>
      <version>3.5.3</version>
    </dependency>
    <!--mysql驱动-->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- SpringBoot集成 Swagger，一般不推荐直接导入 Swagger依赖 原始的坐标。 -->
    <!--
     Swagger 有两个版本 2.0 和 3.0 版，参考文档 https://www.cnblogs.com/antLaddie/p/17418078.html 的说明，总结如下：
     Swagger 2.0 版本通常使用 springfox 来集成，在 Spring Boot 2.3及以下 版本推荐使用；
     Swagger 3.0 版本推荐使用 springdoc 来集成，在 Spring Boot 2.4及以上 版本中推荐使用，后续会逐渐取代springfox-boot-starter工具包。
     不过对于 springdoc 来说，又分为 springdoc-openapi-v1 版本和 springdoc-openapi-v2 版本（SpringBoot-3必须使用这个），
     两者的 依赖名称变化 和 常用注解变化 参考官方文档：https://springdoc.org/#migrating-from-springdoc-v1。
    -->
    <!-- springdoc-openapi-v1 依赖坐标，目前使用比较广泛。
    此依赖会导入Swagger3.0的原生依赖：
    io.swagger.core.v3:swagger-core
      Swagger 3.x规范的核心实现，提供了一组Java API，用于生成和处理OpenAPI规范文件。
      它包括Swagger的核心功能，例如Model、Schema、Parameter、Response等，是构建Swagger API的必要条件。
    io.swagger.core.v3:swagger-annotations
      用于编写Swagger API文档的Java注解库，提供了一组注解，用于描述API元数据。
      例如，@Operation、@Parameter、@ApiResponse等注解基本包含了OpenAPI规范中的所有元素。
    io.swagger.core.v3:swagger-models
      Swagger 3.x规范的Java模型库，提供了一组Java模型类，用于表示OpenAPI规范文件。
      它包含了OpenAPI规范中的所有数据模型，例如PathItem、Operation、Parameter、Components等。
    -->
    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-ui</artifactId>
      <version>1.6.9</version>
    </dependency>
    <!-- springdoc-openapi-v2 依赖坐标，2022年才发布，比较新，它用于代替上面v1版本的 springdoc-openapi-ui -->
<!--    <dependency>-->
<!--      <groupId>org.springdoc</groupId>-->
<!--      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>-->
<!--      <version>2.2.0</version>-->
<!--    </dependency>-->
    <!-- Swagger 2.0 的集成通常使用 springfox 提供的如下两个依赖坐标 -->
<!--    <dependency>-->
<!--      <groupId>io.springfox</groupId>-->
<!--      <artifactId>springfox-swagger2</artifactId>-->
<!--      <version>2.9.2</version>-->
<!--    </dependency>-->
<!--    <dependency>-->
<!--      <groupId>io.springfox</groupId>-->
<!--      <artifactId>springfox-swagger-ui</artifactId>-->
<!--      <version>2.9.2</version>-->
<!--    </dependency>-->
    <!--  springfox 也提供了 Swagger 3.0 的支持，但是自从 2020 年之后就没有更新了，不推荐 -->
<!--    <dependency>-->
<!--      <groupId>io.springfox</groupId>-->
<!--      <artifactId>springfox-boot-starter</artifactId>-->
<!--      <version>3.0.0</version>-->
<!--    </dependency>-->

  </dependencies>

  <build>
    <!--resources打包 dao 的 mapper 配置文件-->
    <resources>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.xml</include>
        </includes>
      </resource>
    </resources>

    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-maven-plugin</artifactId>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
