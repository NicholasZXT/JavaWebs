<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>pers.zxt.javawebs</groupId>
    <!--<groupId>pers.zxt.springboot</groupId>-->
    <artifactId>springboot-demos</artifactId>
    <version>1.0</version>
    <packaging>jar</packaging>

    <name>springboot-demos</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <!-- 这个版本是 springboot 2 最后一个GA版本，支持的 springframework 版本是 5.3.31 -->
        <!-- 参见官方文档 https://docs.spring.io/spring-boot/docs/2.7.18/reference/html/dependency-versions.html -->
        <spring.version>5.3.31</spring.version>
        <springboot.version>2.7.18</springboot.version>
    </properties>

    <!--SpringBoot的父项目-->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <!--<version>2.4.2</version>-->
        <version>2.7.18</version>
        <relativePath/>
    </parent>

    <dependencies>
        <!-- ================= 测试框架依赖 ================= -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- ================= 常用工具依赖 ================= -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.22</version>
        </dependency>

        <!-- ================= Spring系列框架依赖 ================= -->
        <!-- spring框架核心，用于测试SpringConfig的使用，有了下面的springboot依赖项之后，可以不用显式引入-->
        <!--<dependency>-->
        <!--  <groupId>org.springframework</groupId>-->
        <!--  <artifactId>spring-context</artifactId>-->
        <!--  <version>5.3.1</version>-->
        <!--</dependency>-->

        <!--springboot的依赖项，这里选择是web的依赖项-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${springboot.version}</version>
        </dependency>
        <!--处理ConfigurationProperties有关的元数据-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- ================= 数据存储相关依赖 ================= -->
        <!-- mysql驱动 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.32</version>
        </dependency>

        <!-- mybatis起步依赖，不过由于下面引入了 mybatis-plus，所以建议不要手动引入 -->
        <!--<dependency>-->
        <!--    <groupId>org.mybatis.spring.boot</groupId>-->
        <!--    <artifactId>mybatis-spring-boot-starter</artifactId>-->
        <!--    <version>2.1.4</version>-->
        <!--</dependency>-->
        <!-- mybatis-plus起步依赖 -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>3.5.3</version>
        </dependency>

        <!-- redis 依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <!-- ==================== SpringBoot 集成 数据校验 ==================== -->
        <!--
         Java中数据校验最主流和标准化的方案是 Bean Validation (JSR 380 / JSR 303) 及其参考实现 Hibernate Validator。
           - JSR 380 / JSR 303 标准定义了校验注解和校验器的接口，需要引入相关依赖来使用校验注解，不过该依赖只定义了接口和注解，没有实现。
           - Hibernate Validator 是 Bean Validation 的参考实现，也是目前最常用的实现，它实现了 validation-api 并提供了额外的功能。
        -->
        <!-- validation-api 依赖，一般也不需要显式声明，Hibernate Validator 会自动引入 -->
        <!-- 对于 Java EE 8 及更早项目 (如 Spring Boot 2.x) -->
        <!--<dependency>-->
        <!--    <groupId>javax.validation</groupId>-->
        <!--    <artifactId>validation-api</artifactId>-->
        <!--    &lt;!&ndash; 最后一个版本，发布于 2017.11.9 &ndash;&gt;-->
        <!--    <version>2.0.1.Final</version>-->
        <!--</dependency>-->
        <!-- 对于 Jakarta EE 9+ 项目 (如 Spring Boot 3.x) -->
        <!--<dependency>-->
        <!--    <groupId>jakarta.validation</groupId>-->
        <!--    <artifactId>jakarta.validation-api</artifactId>-->
        <!--    &lt;!&ndash; 版本可能随 Spring Boot 自动管理，这个版本使用最广泛，发布于 2022.4. &ndash;&gt;-->
        <!--    <version>3.0.2</version>-->
        <!--</dependency>-->

        <!-- Hibernate Validator 依赖，一般不需要显式声明，由下面的 starter 引入即可 -->
        <!--<dependency>-->
        <!--    <groupId>org.hibernate.validator</groupId>-->
        <!--    <artifactId>hibernate-validator</artifactId>-->
        <!--    &lt;!&ndash; 版本通常由 Spring Boot 管理，这个版本使用也比较广泛 &ndash;&gt;-->
        <!--    <version>8.0.1.Final</version>-->
        <!--</dependency>-->

        <!--
          Hibernate Validator starter 依赖。
          它会自动引入上面的jakarta.validation-api(或 javax.validation:validation-api)依赖 和 hibernate-validator 依赖
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>


        <!-- ==================== SpringBoot 集成 Swagger ==================== -->
        <!--
         Swagger 有两个版本: 2.0 和 3.0，参考文档 https://www.cnblogs.com/antLaddie/p/17418078.html 的说明，总结如下：
           - Swagger 2.0 版本通常使用 springfox 来集成，在 Spring Boot 2.3及以下 版本推荐使用；
           - Swagger 3.0 版本推荐使用 springdoc 来集成，在 Spring Boot 2.4及以上 版本中推荐使用，后续会逐渐取代springfox-boot-starter工具包。
         一般不推荐直接导入 Swagger依赖 原始的坐标，而是通过上面两个package来集成 Swagger。
         对于 springdoc 来说，又分为 springdoc-openapi-v1 版本和 springdoc-openapi-v2 版本（SpringBoot-3必须使用这个），
         两者的 依赖名称变化 和 常用注解变化 参考官方文档：https://springdoc.org/#migrating-from-springdoc-v1。
        -->
        <!-- springdoc-openapi-v1 依赖坐标，目前使用比较广泛。
            此依赖会导入Swagger3.0的原生依赖：
            io.swagger.core.v3:swagger-core
              Swagger 3.x规范的核心实现，提供了一组Java API，用于生成和处理OpenAPI规范文件。
              它包括Swagger的核心功能，例如Model、Schema、Parameter、Response等，是构建Swagger API的必要条件。
            io.swagger.core.v3:swagger-annotations
              用于编写Swagger API文档的Java注解库，提供了一组注解，用于描述API元数据。
              例如，@Operation、@Parameter、@ApiResponse等注解基本包含了OpenAPI规范中的所有元素。
            io.swagger.core.v3:swagger-models
              Swagger 3.x规范的Java模型库，提供了一组Java模型类，用于表示OpenAPI规范文件。
              它包含了OpenAPI规范中的所有数据模型，例如PathItem、Operation、Parameter、Components等。
        -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-ui</artifactId>
            <!-- 1.8.0 是最后一个 springdoc-openapi-v1 的依赖版本 -->
            <version>1.8.0</version>
        </dependency>
        <!-- springdoc-openapi-v2 依赖坐标，2022年才发布，比较新，它用于代替上面v1版本的 springdoc-openapi-ui -->
        <!--<dependency>-->
        <!--  <groupId>org.springdoc</groupId>-->
        <!--  <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>-->
        <!--  <version>2.2.0</version>-->
        <!--</dependency>-->

        <!--
          Swagger 2.0 的集成通常使用 springfox 提供的如下两个依赖坐标。
          2.9.2使用的最多，发布于2018，当前最新是3.0.0版本，2020年发布。
        -->
        <!--<dependency>-->
        <!--  <groupId>io.springfox</groupId>-->
        <!--  <artifactId>springfox-swagger2</artifactId>-->
        <!--  <version>2.9.2</version>-->
        <!--</dependency>-->
        <!--<dependency>-->
        <!--  <groupId>io.springfox</groupId>-->
        <!--  <artifactId>springfox-swagger-ui</artifactId>-->
        <!--  <version>2.9.2</version>-->
        <!--</dependency>-->
        <!--  springfox 也提供了 Swagger 3.0 的支持，但是只有下面这一个版本，并且自从 2020 年之后就没有更新了，不推荐 -->
        <!--<dependency>-->
        <!--  <groupId>io.springfox</groupId>-->
        <!--  <artifactId>springfox-boot-starter</artifactId>-->
        <!--  <version>3.0.0</version>-->
        <!--</dependency>-->

    </dependencies>

    <build>
        <!-- resources 打包 dao 的 mapper 配置文件-->
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <!-- 下面是resource插件默认的资源目录，但是设置了上面的目录之后，就覆盖了默认资源目录，需要手动设置，否则不会打包-->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                    <include>**/*.yml</include>
                    <include>**/*.yaml</include>
                </includes>
            </resource>
        </resources>

        <pluginManagement>
            <plugins>
                <!-- springboot 打包可执行jar包插件-->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>
