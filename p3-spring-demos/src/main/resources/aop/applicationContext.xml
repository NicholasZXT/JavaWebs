<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--声明目标对象，所谓目标对象，就是 MyAspect 类中，所有通知方法的切入点表达式能找到的对象。
      比如 MyAspect.myBefore 方法被 @Before 注解修饰，切入点表达式指定了 pers.spring.aop.service.impl.SomeServiceImplV2.doSome()
      这个方法，因此目标对象是 SomeServiceImplV2 —— 它是 Service 接口的实现类.
      实际上，AspectJ框架会在接口实现类 SomeServiceImplV2 的基础上动态生成一个代理，就像手动写的 ServiceProxy 类那样，
      一个简化的示例就是 ServiceProxyMock 这个类
    -->
    <bean id="someService" class="pers.zxt.spring.aop.service.impl.SomeServiceImplV2" />

    <!--声明切面类对象，其实就是一个普通的bean对象-->
    <bean id="myAspect" class="pers.zxt.spring.aop.handler.MyAspect"  />

    <!--声明自动代理生成器：目的是创建目标对象的代理（类似于ServiceProxy对象）
        调用aspectj框架中的功能， 寻找spring容器中的所有目标对象，把每个目标对象加入切面类中的功能， 生成代理。
        这个代理对象是修改的内存中的目标对象， 这个目标对象就是代理对象（ServiceProxy）
    -->
    <aop:aspectj-autoproxy />
</beans>